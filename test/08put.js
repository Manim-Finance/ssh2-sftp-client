const chai = require('chai');const expect = chai.expect;const chaiAsPromised = require('chai-as-promised');const chaiSubset = require('chai-subset');const { Readable } = require('node:stream');const {  config,  getConnection,  makeLocalPath,  lastRemoteDir,} = require('./hooks/global-hooks.js');const { putCleanup } = require('./hooks/put-hooks.js');const { statSync, createReadStream } = require('node:fs');const { createGzip } = require('node:zlib');chai.use(chaiSubset);chai.use(chaiAsPromised);describe('08put: put() method tests', function () {  let sftp;  before('put() setup hook', async function () {    sftp = await getConnection();    return true;  });  after('put() cleanup hook', async function () {    await putCleanup(sftp, config.sftpUrl);    await sftp.end();    return true;  });  it('put should return a promise', function () {    return expect(      sftp.put(Buffer.from('put promise test'), `${config.sftpUrl}/put-promise.txt`),    ).to.be.a('promise');  });  it('put large text file', async function () {    const localPath = makeLocalPath(config.localUrl, 'test-file1.txt');    const remotePath = `${config.sftpUrl}/put-large.txt`;    await sftp.put(localPath, remotePath);    const localStats = statSync(localPath);    const stats = await sftp.stat(remotePath);    return expect(stats.size).to.equal(localStats.size);  });  it('put with stream options', async function () {    const options = {      readStreamOptions: {        autoClose: false,      },      writeStreamOptions: {        autoClose: false,      },    };    const localPath = makeLocalPath(config.localUrl, 'test-file1.txt');    const remotePath = `${config.sftpUrl}/put-large.txt`;    await sftp.put(localPath, remotePath, options);    const localStats = statSync(localPath);    const stats = await sftp.stat(remotePath);    return expect(stats.size).to.equal(localStats.size);  });  it('put data from buffer into remote file', function () {    return sftp      .put(Buffer.from('hello'), `${config.sftpUrl}/put-buffer.txt`, {        encoding: 'utf8',      })      .then(() => {        return sftp.stat(`${config.sftpUrl}/put-buffer.txt`);      })      .then((stats) => {        return expect(stats).to.containSubset({ size: 5 });      });  });  it('put data from stream into remote file', function () {    const str2 = new Readable();    str2._read = function noop() {};    str2.push('your text here');    // eslint-disable-next-line unicorn/no-array-push-push    str2.push(null);    return sftp      .put(str2, config.sftpUrl + '/put-stream.txt', {        encoding: 'utf8',      })      .then(() => {        return sftp.stat(`${config.sftpUrl}/put-stream.txt`);      })      .then((stats) => {        return expect(stats).to.containSubset({ size: 14 });      });  });  it('put with no src file should be rejected', function () {    return expect(      sftp.put(        makeLocalPath(config.localUrl, 'no-such-file.txt'),        `${config.sftpUrl}/mocha-put-no-file.txt`,      ),    ).to.be.rejectedWith('Bad path');  });  it('put with bad dst path should be rejected', function () {    return expect(      sftp.put(        makeLocalPath(config.localUrl, 'test-file1.txt'),        `${config.sftpUrl}/bad-directory/bad-file.txt`,      ),    ).to.be.rejectedWith('No such file');  });  it('put relative remote path 1', async function () {    const localPath = makeLocalPath(config.localUrl, 'test-file2.txt.gz');    const remotePath = './testServer/put-relative1-gzip.txt.gz';    await sftp.put(localPath, remotePath);    const localStats = statSync(localPath);    const stats = await sftp.stat(remotePath);    return expect(stats.size).to.equal(localStats.size);  });  it('put relative remote path 2', async function () {    const localPath = makeLocalPath(config.localUrl, 'test-file2.txt.gz');    const remotePath = `../${lastRemoteDir(      config.remoteRoot,    )}/testServer/put-relative2-gzip.txt.gz`;    await sftp.put(localPath, remotePath);    const localStats = statSync(localPath);    const stats = await sftp.stat(remotePath);    return expect(stats.size).to.equal(localStats.size);  });  it('put relative local path 3', async function () {    const localPath = './test/testData/test-file2.txt.gz';    const remotePath = `${config.sftpUrl}/put-relative3-gzip.txt.gz`;    await sftp.put(localPath, remotePath);    const localStats = statSync(localPath);    const stats = await sftp.stat(remotePath);    return expect(stats.size).to.equal(localStats.size);  });  it('put relative local path 4', async function () {    const localPath = '../ssh2-sftp-client/test/testData/test-file2.txt.gz';    const remotePath = `${config.sftpUrl}/put-relative4-gzip.txt.gz`;    await sftp.put(localPath, remotePath);    const localStats = statSync(localPath);    const stats = await sftp.stat(remotePath);    return expect(stats.size).to.equal(localStats.size);  });  it('put with gzip on the fly', async function () {    const gzip = createGzip();    const localPath = `${config.localUrl}/test-file1.txt`;    const remotePath = `${config.sftpUrl}/put-gzip-test.gz`;    const rs = createReadStream(localPath);    await sftp.put(rs.pipe(gzip), remotePath);    const exists = await sftp.exists(remotePath);    return expect(exists).to.equal('-');  });});